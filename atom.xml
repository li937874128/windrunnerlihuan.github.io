<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>April is your lie</title>
  <subtitle>四月是你的谎言</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://windrunnerlihuan.com/"/>
  <updated>2016-06-05T19:11:14.253Z</updated>
  <id>http://windrunnerlihuan.com/</id>
  
  <author>
    <name>windrunnerlihuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动直播技术秒开优化经验</title>
    <link href="http://windrunnerlihuan.com/2016/06/06/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/"/>
    <id>http://windrunnerlihuan.com/2016/06/06/移动直播技术秒开优化经验/</id>
    <published>2016-06-05T16:54:05.000Z</published>
    <updated>2016-06-05T19:11:14.253Z</updated>
    
    <content type="html">&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;以下内容来自&lt;code&gt;@高可用架构&lt;/code&gt;，这次当一回技术的搬运工，为大家分享七牛创始人之一————徐立的&lt;code&gt;移动直播技术秒开优化经验&lt;/code&gt;。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/head.jpg&quot; title=&quot;徐立&quot;&gt;&lt;/div&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;徐立，七牛创始合伙人兼产品副总裁，负责七牛直播云的整体研发，是国内 Go / Docker / Container 技术早期布道者，&amp;gt;Go / Containers / Distributed Systems 技术的忠实爱好者和实践者。曾合著国内第一本 Go 语言图书《Go 语言编程》，翻译《Go 语言程序设计》。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;现今移动直播技术上的挑战要远远难于传统设备或电脑直播，其完整的处理环节包括但不限于：音视频采集、美颜/滤镜/特效处理、编码、封包、推流、转码、分发、解码/渲染/播放等。&lt;/p&gt;
&lt;p&gt;直播常见的问题包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主播在不稳定的网络环境下如何稳定推流？&lt;/li&gt;
&lt;li&gt;偏远地区的观众如何高清流畅观看直播？&lt;/li&gt;
&lt;li&gt;直播卡顿时如何智能切换线路？&lt;/li&gt;
&lt;li&gt;如何精确度量直播质量指标并实时调整？&lt;/li&gt;
&lt;li&gt;移动设备上不同的芯片平台如何高性能编码和渲染视频？&lt;/li&gt;
&lt;li&gt;美颜等滤镜特效处理怎么做？&lt;/li&gt;
&lt;li&gt;如何实现播放秒开？&lt;/li&gt;
&lt;li&gt;如何保障直播持续播放流畅不卡顿？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次分享将为大家揭开移动直播核心技术的神秘面纱。&lt;/p&gt;
&lt;h1 id=&quot;视频、直播等基础知识&quot;&gt;&lt;a href=&quot;#视频、直播等基础知识&quot; class=&quot;headerlink&quot; title=&quot;视频、直播等基础知识&quot;&gt;&lt;/a&gt;视频、直播等基础知识&lt;/h1&gt;&lt;h2 id=&quot;什么是视频？&quot;&gt;&lt;a href=&quot;#什么是视频？&quot; class=&quot;headerlink&quot; title=&quot;什么是视频？&quot;&gt;&lt;/a&gt;什么是视频？&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;首先我们需要理解一个最基本的概念：视频。从感性的角度来看，视频就是一部充满趣味的影片，可以是电影，可以是短片，是一连贯的视觉冲击力表现丰富的画面和音频。但从理性的角度来看，视频是一种有结构的数据，用工程的语言解释，我们可以把视频剖析成如下结构：&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/whatisav.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;内容元素 ( Content )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图像 ( Image )&lt;/li&gt;
&lt;li&gt;音频 ( Audio )&lt;/li&gt;
&lt;li&gt;元信息 ( Metadata )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编码格式 ( Codec )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video : H.264，H.265, …&lt;/li&gt;
&lt;li&gt;Audio : AAC， HE-AAC, …&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器封装 (Container)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MP4，MOV，FLV，RM，RMVB，AVI，…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任何一个视频 Video 文件，从结构上讲，都是这样一种组成方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由图像和音频构成最基本的内容元素；&lt;/li&gt;
&lt;li&gt;图像经过视频编码压缩格式处理（通常是 H.264）；&lt;/li&gt;
&lt;li&gt;音频经过音频编码压缩格式处理（例如 AAC）；&lt;/li&gt;
&lt;li&gt;注明相应的元信息（Metadata）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后经过一遍容器（Container）封装打包（例如 MP4），构成一个完整的视频文件。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;如果觉得难以理解，可以想象成一瓶番茄酱。最外层的瓶子好比这个容器封装（Container），瓶子上注明的原材料和加工厂地等信息好比元信息（Metadata），瓶盖打开（解封装）后，番茄酱本身好比经过压缩处理过后的编码内容，番茄和调料加工成番茄酱的过程就好比编码（Codec），而原材料番茄和调料则好比最原本的内容元素（Content）。&lt;/p&gt;
&lt;h2 id=&quot;视频的实时传输&quot;&gt;&lt;a href=&quot;#视频的实时传输&quot; class=&quot;headerlink&quot; title=&quot;视频的实时传输&quot;&gt;&lt;/a&gt;视频的实时传输&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;简而言之，理性的认知视频的结构后，有助于我们理解视频直播。如果视频是一种“有结构的数据”，那么视频直播无疑是&lt;strong&gt;实时传输&lt;/strong&gt;这种“有结构的数据”（视频）的方式。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;那么一个显而易见的问题是：如何实时（Real-Time）传输这种“有结构的数据”（视频）呢？&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这里边一个悖论是：一个经过容器（Container）封装后的视频，一定是不可变的 ( Immutable ) 视频文件，不可变的 ( Immutable ) 的视频文件已经是一个生产结果，根据“相对论”，而这个生产结果显然不可能精确到实时的程度，它已经是一段时空的记忆。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;因此视频直播，一定是一个 “边生产，边传输，边消费” 的过程。这意味着，我们需要更近一步了解视频从原始的内容元素 ( 图像和音频 ) 到成品 ( 视频文件 ) 之前的中间过程 ( 编码 )。&lt;/p&gt;
&lt;h2 id=&quot;视频编码压缩&quot;&gt;&lt;a href=&quot;#视频编码压缩&quot; class=&quot;headerlink&quot; title=&quot;视频编码压缩&quot;&gt;&lt;/a&gt;视频编码压缩&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;不妨让我们来深入浅出理解视频编码压缩技术。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;为了便于视频内容的存储和传输，通常需要减少视频内容的体积，也就是需要将原始的内容元素(图像和音频)经过压缩，压缩算法也简称编码格式。例如视频里边的原始图像数据会采用 H.264 编码格式进行压缩，音频采样数据会采用 AAC 编码格式进行压缩。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;视频内容经过编码压缩后，确实有利于存储和传输; 不过当要观看播放时，相应地也需要解码过程。因此编码和解码之间，显然需要约定一种编码器和解码器都可以理解的约定。就视频图像编码和解码而言，这种约定很简单：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编码器将多张图像进行编码后生产成一段一段的 GOP ( Group of Pictures ) ， 解码器在播放时则是读取一段一段的 GOP 进行解码后读取画面再渲染显示。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/whathappend1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;GOP ( Group of Pictures ) 是一组连续的画面，由一张 I 帧和数张 B / P 帧组成，是视频图像编码器和解码器存取的基本单位，它的排列顺序将会一直重复到影像结束。&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/whathappend2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;I 帧是内部编码帧（也称为关键帧），P 帧是前向预测帧（前向参考帧），B 帧是双向内插帧（双向参考帧）。简单地讲，I 帧是一个完整的画面，而 P 帧和 B 帧记录的是相对于 I 帧的变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果没有 I 帧，P 帧和 B 帧就无法解码。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/mainvsref.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;小结一下，一个视频 ( Video ) ，其图像部分的数据是一组 GOP 的集合, 而单个 GOP 则是一组 I / P / B 帧图像的集合。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在这样的一种几何关系中，Video 好比一个 “物体”，GOP 好比 “分子”，I / P / B 帧的图像则好比 “原子”。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;想象一下，如果我们把传输一个 “物体”，改成传输一个一个的 “原子”，将最小颗粒以光速传送，那么以人的生物肉眼来感知，将是一种怎样的体验？&lt;/p&gt;
&lt;h2 id=&quot;什么是视频直播？&quot;&gt;&lt;a href=&quot;#什么是视频直播？&quot; class=&quot;headerlink&quot; title=&quot;什么是视频直播？&quot;&gt;&lt;/a&gt;什么是视频直播？&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;不难脑洞大开一下，直播就是这样的一种体验。视频直播技术，就是将视频内容的最小颗粒 ( I / P / B 帧，…)，基于时间序列，以光速进行传送的一种技术。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;简而言之，直播就是将每一帧数据 ( Video / Audio / Data Frame )，打上时序标签 ( Timestamp ) 后进行流式传输的过程。发送端源源不断的采集音视频数据，经过编码、封包、推流，再经过中继分发网络进行扩散传播，播放端再源源不断地下载数据并按时序进行解码播放。如此就实现了 “边生产、边传输、边消费” 的直播过程。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;理解以上两个关于&lt;code&gt;视频&lt;/code&gt;和&lt;code&gt;直播&lt;/code&gt;两个基础概念后，接下来我们就可以一窥直播的业务逻辑了。&lt;/p&gt;
&lt;h2 id=&quot;直播的业务逻辑&quot;&gt;&lt;a href=&quot;#直播的业务逻辑&quot; class=&quot;headerlink&quot; title=&quot;直播的业务逻辑&quot;&gt;&lt;/a&gt;直播的业务逻辑&lt;/h2&gt;&lt;p&gt;如下是一个最精简的一对多直播业务模型，以及各个层级之间的协议。&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/liveprotocol.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;各协议差异对比如下：&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/protocoldiff1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/protocoldiff2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;以上就是关于直播技术的一些基础概念。下面我们进一步了解下影响人们视觉体验的直播性能指标。&lt;/p&gt;
&lt;h1 id=&quot;影响视觉体验的直播性能指标&quot;&gt;&lt;a href=&quot;#影响视觉体验的直播性能指标&quot; class=&quot;headerlink&quot; title=&quot;影响视觉体验的直播性能指标&quot;&gt;&lt;/a&gt;影响视觉体验的直播性能指标&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;直播第一个性能指标是延迟&lt;/strong&gt;，延迟是数据从信息源发送到目的地所需的时间。&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/delay1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;根据爱因斯坦的狭义相对论，光速是所有能量、物质和信息运动所能达到的最高速度，这个结论给传播速度设定了上限。因此，即便我们肉眼感觉到的实时，实际上也是有一定的延迟。&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/delay2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;由于 RTMP/HLS 是基于 TCP 之上的应用层协议，TCP 三次握手，四次挥手，慢启动过程中的每一次往返来回，都会加上一次往返耗时 ( RTT )，这些交互过程都会增加延迟。&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/delay3.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;其次根据 TCP 丢包重传特性，网络抖动可能导致丢包重传，也会间接导致延迟加大。&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/jitter.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;一个完整的直播过程，包括但不限于以下环节：&lt;strong&gt;采集、处理、编码、封包、推流、传输、转码、分发、拉流、解码、播放&lt;/strong&gt;。从推流到播放，再经过中间转发环节，延迟越低，则用户体验越好。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;第二个直播性能指标卡顿&lt;/strong&gt;，是指视频播放过程中出现画面滞帧，让人们明显感觉到“卡”。单位时间内的播放卡顿次数统计称之为卡顿率。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;造成卡顿的因素有可能是推流端发送数据中断，也有可能是公网传输拥塞或网络抖动异常，也有可能是终端设备的解码性能太差。卡顿频次越少或没有，则说明用户体验越好。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;第三个直播性能指标首屏耗时&lt;/strong&gt;，指第一次点击播放后，肉眼看到画面所等待的时间。技术上指播放器解码第一帧渲染显示画面所花的耗时。通常说的 “秒开”，指点击播放后，一秒内即可看到播放画面。首屏打开越快，说明用户体验越好。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;如上三个直播性能指标，分别对应一个低延迟、高清流畅、极速秒开 的用户体验诉求。了解这三个性能指标，对优化移动直播 APP 的用户体验至关重要。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;那么移动直播场景下具体而言有哪些常见的坑呢？&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;根据实践总结下来的经验，移动平台上视频直播的坑主要可以总结为两方面：设备差异，以及网络环境这些场景下带来的技术考验。&lt;/p&gt;
&lt;h1 id=&quot;移动直播场景的坑与规避措施&quot;&gt;&lt;a href=&quot;#移动直播场景的坑与规避措施&quot; class=&quot;headerlink&quot; title=&quot;移动直播场景的坑与规避措施&quot;&gt;&lt;/a&gt;移动直播场景的坑与规避措施&lt;/h1&gt;&lt;h2 id=&quot;不同芯片平台上的编码差异&quot;&gt;&lt;a href=&quot;#不同芯片平台上的编码差异&quot; class=&quot;headerlink&quot; title=&quot;不同芯片平台上的编码差异&quot;&gt;&lt;/a&gt;不同芯片平台上的编码差异&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/delay2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;iOS 平台上无论硬编还是软编，由于是 Apple 一家公司出厂，几乎不存在因为芯片平台不同而导致的编码差异&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;然而，在 Android 平台上，Android Framework SDK 提供的 MediaCodec 编码器，在不同的芯片平台上，差异表现很大， 不同的厂家使用不同的芯片，而不同的芯片平台上 Android MediaCodec 表现略有差异，通常实现全平台兼容的成本不低。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;另外就是 Android MediaCodec 硬编层面的 H.264 编码画质参数是固定的 baseline，所以画质通常也一般。因此，在 Android 平台下，&lt;strong&gt;推荐是用软编，好处是画质可调控，兼容性也更好&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;低端设备如何上高性能地采集和编码？&quot;&gt;&lt;a href=&quot;#低端设备如何上高性能地采集和编码？&quot; class=&quot;headerlink&quot; title=&quot;低端设备如何上高性能地采集和编码？&quot;&gt;&lt;/a&gt;低端设备如何上高性能地采集和编码？&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/gether.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;例如 Camera 采集输出的可能是图片，一张图的体积并不会小，如果采集的频次很高，编码的帧率很高，每张图都经过编码器，那么编码器又可能会出现过载。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这个时候，可以考虑在编码前，不影响画质的前提下（前面我们讲过帧率的微观意义），进行&lt;strong&gt;选择性丢帧&lt;/strong&gt;，以此降低编码环节的功耗开销。&lt;/p&gt;
&lt;h2 id=&quot;弱网下如何保障高清流畅推流&quot;&gt;&lt;a href=&quot;#弱网下如何保障高清流畅推流&quot; class=&quot;headerlink&quot; title=&quot;弱网下如何保障高清流畅推流&quot;&gt;&lt;/a&gt;弱网下如何保障高清流畅推流&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/resource.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;移动网络下，通常容易遇到网络不稳定，连接被重置，断线重连，一方面频繁重连，建立连接需要开销。另一方面尤其是发生 GPRS / 2G / 3G / 4G 切换时，带宽可能出现瓶颈。当带宽不够，帧率较高/码率较高的内容较难发送出去，这个时候就需要可变码率支持。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;即在推流端，可检测网络状态和简单测速，动态来切换码率，以保障网络切换时的推流流畅。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;其次编码、封包、推流 这一部分的逻辑也可以做微调，可以尝试选择性丢帧，比如优先丢视频参考帧（不丢 I 帧和音频帧 )，这样也可以减少要传输的数据内容，但同时又达到了不影响画质和版视听流畅的目的。&lt;/p&gt;
&lt;h2 id=&quot;需要区分直播流的状态和业务状态&quot;&gt;&lt;a href=&quot;#需要区分直播流的状态和业务状态&quot; class=&quot;headerlink&quot; title=&quot;需要区分直播流的状态和业务状态&quot;&gt;&lt;/a&gt;需要区分直播流的状态和业务状态&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;直播是媒体流、APP 的交互是 API 信令流，两者的状态不能混为一谈。尤其是不能基于 APP 的交互的 API 状态来判断直播流的状态。&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/seeproduct.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;以上是移动直播场景下常见的几个坑和规避措施。&lt;/p&gt;
&lt;h1 id=&quot;移动直播场景其他优化措施&quot;&gt;&lt;a href=&quot;#移动直播场景其他优化措施&quot; class=&quot;headerlink&quot; title=&quot;移动直播场景其他优化措施&quot;&gt;&lt;/a&gt;移动直播场景其他优化措施&lt;/h1&gt;&lt;h2 id=&quot;一、怎么优化打开速度，达到传说中的-“秒开”？&quot;&gt;&lt;a href=&quot;#一、怎么优化打开速度，达到传说中的-“秒开”？&quot; class=&quot;headerlink&quot; title=&quot;一、怎么优化打开速度，达到传说中的 “秒开”？&quot;&gt;&lt;/a&gt;一、怎么优化打开速度，达到传说中的 “秒开”？&lt;/h2&gt;&lt;p&gt;一、怎么优化打开速度，达到传说中的 “秒开”？&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;大家可能会看到，市面上某些手机直播 APP 的打开速度非常快，一点就开。而某些手机直播 APP，点击播放后要等好几秒以后才能播放。是什么原因导致如此的天壤之别呢？&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;大部分播放器都是拿到一个完成的 GOP 后才能解码播放，基于 FFmpeg 移植的播放器甚至需要等待音画时间戳同步后才能播放（如果一个直播里边没有音频只有视频相当于要等待音频超时后才能播放画面）。&lt;/p&gt;
&lt;p&gt;“秒开”可以从以下几个方面考虑：&lt;/p&gt;
&lt;h3 id=&quot;1-改写播放器逻辑让播放器拿到第一个关键帧后就给予显示。&quot;&gt;&lt;a href=&quot;#1-改写播放器逻辑让播放器拿到第一个关键帧后就给予显示。&quot; class=&quot;headerlink&quot; title=&quot;1. 改写播放器逻辑让播放器拿到第一个关键帧后就给予显示。&quot;&gt;&lt;/a&gt;1. 改写播放器逻辑让播放器拿到第一个关键帧后就给予显示。&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;GOP 的第一帧通常都是关键帧，由于加载的数据较少，可以达到 “首帧秒开”。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;如果直播服务器支持 GOP 缓存，意味着播放器在和服务器建立连接后可立即拿到数据，从而省却跨地域和跨运营商的回源传输时间。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;GOP 体现了关键帧的周期，也就是两个关键帧之间的距离，即一个帧组的最大帧数。假设一个视频的恒定帧率是 24fps（即1秒24帧图像），关键帧周期为 2s，那么一个 GOP 就是 48 张图像。一般而言，每一秒视频至少需要使用一个关键帧。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;增加关键帧个数可改善画质（GOP 通常为 FPS 的倍数），但是同时增加了带宽和网络负载&lt;/strong&gt;。这意味着，客户端播放器下载一个 GOP，毕竟该 GOP 存在一定的数据体积，如果播放端网络不佳，有可能不是能够快速在秒级以内下载完该 GOP，进而影响观感体验。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;如果不能更改播放器行为逻辑为首帧秒开，直播服务器也可以做一些取巧处理，比如&lt;strong&gt;从缓存 GOP 改成缓存双关键帧&lt;/strong&gt;（减少图像数量），这样可以极大程度地减少播放器加载 GOP 要传输的内容体积。&lt;/p&gt;
&lt;h3 id=&quot;2-在-APP-业务逻辑层面方面优化。&quot;&gt;&lt;a href=&quot;#2-在-APP-业务逻辑层面方面优化。&quot; class=&quot;headerlink&quot; title=&quot;2. 在 APP 业务逻辑层面方面优化。&quot;&gt;&lt;/a&gt;2. 在 APP 业务逻辑层面方面优化。&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;比如提前做好 DNS 解析（省却几十毫秒），和提前做好测速选线（择取最优线路）。经过这样的预处理后，在点击播放按钮时，将极大提高下载性能。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;一方面，可以围绕传输层面做性能优化；另一方面，可以围绕客户播放行为做业务逻辑优化。两者可以有效的互为补充，作为秒开的优化空间。&lt;/p&gt;
&lt;h2 id=&quot;二、美颜等滤镜如何处理？&quot;&gt;&lt;a href=&quot;#二、美颜等滤镜如何处理？&quot; class=&quot;headerlink&quot; title=&quot;二、美颜等滤镜如何处理？&quot;&gt;&lt;/a&gt;二、美颜等滤镜如何处理？&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在手机直播场景下，这就是一个刚需。没有美颜功能的手机直播 APP，主播基本不爱用。可以在采集画面后，将数据送给编码器之前，将数据源回调给滤镜处理程序，原始数据经过滤镜处理完后，再送回给编码器进行编码即可。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;除了移动端可以做体验优化之外，直播流媒体服务端架构也可以降低延迟。例如收流服务器主动推送 GOP 至边缘节点，边缘节点缓存 GOP，播放端则可以快速加载，减少回源延迟。&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/push.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;其次，可以贴近终端就近处理和分发&lt;br&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/deliver.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;三、如何保障直播持续播放流畅不卡顿？&quot;&gt;&lt;a href=&quot;#三、如何保障直播持续播放流畅不卡顿？&quot; class=&quot;headerlink&quot; title=&quot;三、如何保障直播持续播放流畅不卡顿？&quot;&gt;&lt;/a&gt;三、如何保障直播持续播放流畅不卡顿？&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;“秒开”解决的是直播首次加载的播放体验，如何保障直播持续播放过程中的画面和声音视听流畅呢？因为，一个直播毕竟不是一个 HTTP 一样的一次性请求，而是一个 Socket 层面的长连接维持，直到直到主播主动终止推流。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;上述我们讲过卡顿的定义：即播放时画面滞帧，触发了人们的视觉感受。在不考虑终端设备性能差异的情况下，针对网络传输层面的原因，我们看看如何保障一个持续的直播不卡顿。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这其实是一个直播过程中传输网络不可靠时的容错问题。例如，播放端临时断网了，但又快速恢复了，针对这种场景，播放端如果不做容错处理，很难不出现黑屏或是重新加载播放的现象。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;为了容忍这种网络错误，并达到让终端用户无感知，&lt;strong&gt;客户端播放器可以考虑构建一个FIFO（先进先出）的缓冲队列&lt;/strong&gt;，解码器从播放缓存队列读取数据，缓存队列从直播服务器源源不断的下载数据。通常，缓存队列的容量是以时间为单位（比如3s），在播放端网络不可靠时，客户端缓存区可以起到“断网无感”的过渡作用。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;显然，这只是一个“缓兵之计”，如果直播服务器边缘节点出现故障，而此时客户端播放器又是长连接，在无法收到对端的连接断开信号，客户端的缓冲区容量再大也不管用了，这个时候就需要结合客户端业务逻辑来做调度。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;重要的是客户端结合服务端，可以做精准调度。在初始化直播推流之前，例如基于 IP 地理位置和运营商的精确调度，分配线路质量最优的边缘接入节点。在直播推流的过程中，可以实时监测帧率反馈等质量数据，基于直播流的质量动态调整线路。&lt;/p&gt;
&lt;h1 id=&quot;Q-amp-A&quot;&gt;&lt;a href=&quot;#Q-amp-A&quot; class=&quot;headerlink&quot; title=&quot;Q&amp;amp;A&quot;&gt;&lt;/a&gt;Q&amp;amp;A&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1. 关键帧设置频率一般是多少？有没有根据接入动态设置？过长首屏秒会很难做到。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;徐立：关键帧间隔越长，也就是 GOP 越长，理论上画面越高清。但是生成 HLS 直播时，最小切割粒度也是一个 GOP，所以针对交互直播，通常不建议 GOP 设置太长。直播一般 2 个关键帧间隔即可。比如帧率是 24fps， 那么 2 个关键帧的间隔就是 48fps ，这个 GOP 就是2s。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 七牛这个直播是用的网宿加速？有遇到什么坑没？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;徐立：七牛在直播方面主要是自建节点，也支持融合众多第三方 CDN 服务商，多样化的线路组合为客户提供更优质的服务。在和第三方 CDN 合作的过程中遇到的问题等有机会再做更细粒度的交流和分享。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. RTMP 直播流除了优化线路外，还有什么加速手段吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;徐立：物理上优化线路，逻辑上优化策略，比如选择性丢帧，不影响编码画质的前提下减轻传输体积。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. OBS 推流，播放端 HLS 出现视/音频不同步是哪个环节的问题？怎么优化？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;徐立：有可能是采集端的问题，如果是采集端编码环节就出现音画不同步，可以在收流服务器上做音画时间戳同步，这样是全局的校对。如果是播放端解码性能问题，那么需要调节播放逻辑，比如保证音画时间戳强一致性的前提下，选择性丢一部帧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. PPT 前几页中一个概念好像错了，I 帧不是关键帧，IDR 帧才是。IDR 帧是 I 帧，但是 I 帧不一定是 IDR 帧。只有 IDR 帧才是可重入的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;徐立：中文都把 I 帧翻译成关键帧了，不过既然提到了 IDR 帧，可以展开说明一下。所有的 IDR 帧都是 I 帧，但是并不是所有 I 帧都是 IDR 帧，IDR 帧是 I 帧的子集。I 帧严格定义是帧内编码帧，由于是一个全帧压缩编码帧，通常用 I 帧表示 “关键帧”。IDR 是基于 I 帧的一个 “扩展”，带了控制逻辑，IDR 图像都是 I 帧图像，当解码器解码到 IDR 图像时，会立即将参考帧队列清空，将已解码的数据全部输出或抛弃。重新查找参数集，开始一个新的序列。这样如果前一个序列出现重大错误，在这里可以获得重新同步的机会。IDR 图像之后的图像永远不会使用 IDR 之前的图像的数据来解码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 有没有调研过 nginx rtmp module，为什么没有用，对它有什么评价？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;徐立：有调研过，nginx_rtmp_module 是单进程多线程，非 go 这种轻量级线程/协程用并发自然语义的方式编写流业务。nginx 原本的代码量较大（约 16 万行，但和直播业务相关的功能并不是很多）。且主要靠写 nginx.conf 做配置租户，通常单租户可以，但业务可扩展性方面不是很灵活，可满足基本需求，不满足高级功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. 用到了那些开源软件？编码用的是 x264 吗？直播服务器你们自己开发还是开源的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;徐立：直播服务器用 go 开发的，移动端编码优先硬编，软编用 x264&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. 请教一下用 OBS 推流到 nginx_rtmp_module 的时候是已经做了视频压缩了还是需要基于 OBS 再开发？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;徐立：OBS 把编码压缩都做了，不需要再开发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. 视频直播想在 HLS 流中无缝插入一段广告的 ts 文件，有问题想请教一下：1、这段 ts 的分辨率是否一定要和之前的视频流一致？2、pts 时间戳是否要和上一个 ts 递增？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;徐立：&lt;br&gt;1、可以不一致。这种情况两段视频完全是独立状态，可以没有任何关系，只需要插入 discontinue 标记，播放器在识别到这个标记之后重置解码器参数就可以无缝播放，画面会很平滑的切换。&lt;br&gt;2、不需要递增。举个例子，视频 A 正在直播，播放到 pts 在 5s 的时候，插入一个视频 B，需要先插入一个 discontinue，再插入 B，等 B 播放完之后，再插入一个 discontinue，再插入 A，这个时候 A 的 pts 可以和之前递增，也可以按照中间插入的 B 的时长做偏移，一般做点播和时移的时候 pts 会连续递增，直播的话会算上 B 的时长。&lt;/p&gt;
&lt;p&gt;由于移动直播在实践上还有非常多细节，本文未能全部覆盖，感兴趣的朋友欢迎在文章最后留言讨论。&lt;/p&gt;
&lt;h1 id=&quot;PPT-下载地址&quot;&gt;&lt;a href=&quot;#PPT-下载地址&quot; class=&quot;headerlink&quot; title=&quot;PPT 下载地址&quot;&gt;&lt;/a&gt;PPT 下载地址&lt;/h1&gt;&lt;p&gt;我备份了一分pdf，下载点&lt;a href=&quot;http://o7xxrho8u.bkt.clouddn.com/file/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/pili_technology_sharing.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;以下内容来自&lt;code&gt;@高可用架构&lt;/code&gt;，这次当一回技术的搬运工，为大家分享七牛创始人之一————徐立的&lt;code&gt;移动直播技术秒开优化经验&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="科普分享" scheme="http://windrunnerlihuan.com/categories/%E7%A7%91%E6%99%AE%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="移动直播" scheme="http://windrunnerlihuan.com/tags/%E7%A7%BB%E5%8A%A8%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建历程————————Github和Hexo</title>
    <link href="http://windrunnerlihuan.com/2016/05/27/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/"/>
    <id>http://windrunnerlihuan.com/2016/05/27/博客搭建历程/</id>
    <published>2016-05-27T15:18:11.000Z</published>
    <updated>2016-05-30T17:58:03.145Z</updated>
    
    <content type="html">&lt;p&gt;我的博客搭建历程，使用github pages + hexo，域名解析，配置插件&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;其实从去年开始我就想搭建一个自己的个人网站了，主要用于记录自己的技术积累和重点知识。但由于自己太懒，能力也太渣，所以就一直没有行动。直到今年，突然发现随着知识积累的增加，有好多重要的内容脑袋都记不下了，有的网页就直接存个标签，但是标签越存越多，但却很少再次去浏览，最后知识还是会淡忘，所以今天痛下决心，还是自己搭个博客吧，以挽回知识的流失，同时也可以向外部分享自己的一些见解。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;博客搭建过程也是一波三折，遇到各种坑爹问题，还好我没那么轻易放弃，最终在无数次失败之后终于成功了。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;1-github配置&quot;&gt;&lt;a href=&quot;#1-github配置&quot; class=&quot;headerlink&quot; title=&quot;1. github配置&quot;&gt;&lt;/a&gt;1. github配置&lt;/h2&gt;&lt;p&gt;1）首先需要有一个github账号，没有的话就得申请一个。&lt;br&gt;然后新建一个代码仓库，注意，仓库名一定要是：&lt;strong&gt;你的github账号名字.github.io&lt;/strong&gt;，比如我的是windrunnerlihuan.github.io。&lt;br&gt;2）clone到本地，比如我的就是如下命令：&lt;br&gt;git clone &lt;a href=&quot;https://github.com/windrunnerlihuan/windrunnerlihuan.github.io.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/windrunnerlihuan/windrunnerlihuan.github.io.git&lt;/a&gt;&lt;br&gt;cd 进文件夹，我们先建个index.html用于测试：&lt;br&gt;cd windrunnerlihuan.github.io&lt;br&gt;vi index.html&lt;br&gt;然后编辑：&lt;br&gt;&lt;figure class=&quot;highlight vbscript-html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;h1&amp;gt;github pages测试&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后按esc，再输入“:wq”回车保存。然后提交上去：&lt;br&gt;git add .&lt;br&gt;git commit -m “测试github pages”&lt;br&gt;git push&lt;br&gt;此时需要输入你的github账号和密码，输入就是了，成功后我们验证一下。&lt;br&gt;然后打开浏览器，输入地址，比如我的就是：&lt;a href=&quot;http://windrunnerlihuan.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://windrunnerlihuan.github.io&lt;/a&gt;&lt;br&gt;如果能正确显示“&lt;strong&gt;github pages测试&lt;/strong&gt;”字样，说明我们成功了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-hexo安装&quot;&gt;&lt;a href=&quot;#2-hexo安装&quot; class=&quot;headerlink&quot; title=&quot;2. hexo安装&quot;&gt;&lt;/a&gt;2. hexo安装&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架。通过Hexo我们可以快速创建自己的博客，仅需要几条命令就可以完成。&lt;/p&gt;
&lt;p&gt;Hexo的官方网站：&lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hexo.io/&lt;/a&gt; ，也是基于Github构建的网站。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;不过要使用hexo必须装node.js，这个easy，直接在官网&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org/en/&lt;/a&gt; 上下一个，首页就是下载页面，选一个你自己电脑平台对应的，比如我的是windows x64。如果不想看英文呢，还有个中文网站&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nodejs.cn/&lt;/a&gt; ，几乎是把英文网站翻译了一遍，套路都一样。下载下来之后文件名叫&lt;strong&gt;node-v4.4.4-x64.msi&lt;/strong&gt;，双击，一路next，傻瓜式安装。&lt;/p&gt;
&lt;p&gt;接着安装hexo：&lt;br&gt;1）打开控制台（按下win + r，输入cmd，回车）或者直接在git bash界面。&lt;br&gt;输入 npm install -g hexo，然后开始安装hexo。&lt;br&gt;成功后再输入 npm install hexo-deployer-git –save，安装发布工具。&lt;/p&gt;
&lt;p&gt;2）接着进入我们从github上克隆下来的windrunnerlihuan.github.io文件，再次git bash here。&lt;br&gt;输入 hexo init，初始化hexo。&lt;br&gt;完成后我们测试一下：&lt;br&gt;输入hexo server&lt;br&gt;bash控制台会打印出 “[info] Hexo is running at &lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt;. Press Ctrl+C to stop.”&lt;br&gt;这时端口4000被打开了，我们能过浏览器打开地址，&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/home.png&quot; alt=&quot;hexo首页默认图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;出现了默认的网页界面，是不是很容易呢！！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-hexo配置&quot;&gt;&lt;a href=&quot;#3-hexo配置&quot; class=&quot;headerlink&quot; title=&quot;3. hexo配置&quot;&gt;&lt;/a&gt;3. hexo配置&lt;/h2&gt;&lt;p&gt;我们先看一下文件结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/file.png&quot; alt=&quot;hexo文件结构图图片&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scaffolds 脚手架，也就是一个工具模板&lt;/li&gt;
&lt;li&gt;scripts 写文件的js，扩展hexo的功能&lt;/li&gt;
&lt;li&gt;source 存放博客正文内容&lt;/li&gt;
&lt;li&gt;source/_drafts 草稿箱&lt;/li&gt;
&lt;li&gt;source/_posts 文件箱&lt;/li&gt;
&lt;li&gt;themes 存放皮肤的目录&lt;/li&gt;
&lt;li&gt;themes/landscape 默认的皮肤&lt;/li&gt;
&lt;li&gt;_config.yml 全局的配置文件&lt;/li&gt;
&lt;li&gt;db.json 静态常量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这里，我们每次用到的就是_posts目录里的文件，而_config.yml文件和themes目录是第一次配置好就行了。&lt;/p&gt;
&lt;p&gt;_posts目录：Hexo是一个静态博客框架，因此没有数据库。文章内容都是以文本文件方式进行存储的，直接存储在_posts的目录。Hexo天生集成了markdown，我们可以直接使用markdown语法格式写博客，例如:hello-world.md。新增加一篇文章，就在_posts目录，新建一个xxx.md的文件。&lt;/p&gt;
&lt;p&gt;themes目录：是存放皮肤的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。&lt;/p&gt;
&lt;p&gt;我们主要改的就是_config.yml全局配置文件，以及新建文章时要增加或者修改文章在source/-posts/目录下的md文件。&lt;/p&gt;
&lt;p&gt;1）修改_config.yml全局配置文件&lt;/p&gt;
&lt;p&gt;_config.yml是全局的配置文件：很多的网站配置都在这个文件中定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;站点信息: 定义标题，作者，语言&lt;/li&gt;
&lt;li&gt;URL: URL访问路径&lt;/li&gt;
&lt;li&gt;文件目录: 正文的存储目录&lt;/li&gt;
&lt;li&gt;写博客配置：文章标题，文章类型，外部链接等&lt;/li&gt;
&lt;li&gt;目录和标签：默认分类，分类图，标签图&lt;/li&gt;
&lt;li&gt;归档设置：归档的类型&lt;/li&gt;
&lt;li&gt;服务器设置：IP，访问端口，日志输出&lt;/li&gt;
&lt;li&gt;时间和日期格式： 时间显示格式，日期显示格式&lt;/li&gt;
&lt;li&gt;分页设置：每页显示数量&lt;/li&gt;
&lt;li&gt;评论：外挂的Disqus评论系统&lt;/li&gt;
&lt;li&gt;插件和皮肤：换皮肤，安装插件&lt;/li&gt;
&lt;li&gt;Markdown语言：markdown的标准&lt;/li&gt;
&lt;li&gt;CSS的stylus格式：是否允许压缩&lt;/li&gt;
&lt;li&gt;部署配置：github发布&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# Hexo Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;## Docs: https://hexo.io/docs/configuration.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;## Source: https://github.com/hexojs/hexo/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# Site 站点信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: this way, little boy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subtitle: 無限大な夢のあとの 何もない世の中じゃ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;description:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;author: Huan Li&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;language:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timezone:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url: http://windrunnerlihuan.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root: /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;permalink: :year/:month/:day/:title/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;permalink_defaults:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# Directory 文件目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source_dir: source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public_dir: public&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tag_dir: tags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;archive_dir: archives&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;category_dir: categories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;code_dir: downloads/code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i18n_dir: :lang&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;skip_render:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# Writing 写博客配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;new&lt;span class=&quot;emphasis&quot;&gt;_post_&lt;/span&gt;name: :title.md # File name of new posts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default_layout: post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;titlecase: false # Transform title into titlecase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;external_link: true # Open external links in new tab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filename_case: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render_drafts: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post&lt;span class=&quot;emphasis&quot;&gt;_asset_&lt;/span&gt;folder: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;relative_link: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;future: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;highlight:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  line_number: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  auto_detect: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tab_replace:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# Category &amp;amp; Tag 目录和标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default_category: uncategorized&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;category_map:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tag_map:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# Date / Time format 时间和日期&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;## Hexo uses Moment.js to parse and display date&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;## You can customize the date format as defined in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;## http://momentjs.com/docs/#/displaying/format/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date_format: YYYY-MM-DD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time_format: HH:mm:ss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# Pagination 分页设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;## Set per_page to 0 to disable pagination&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;per_page: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pagination_dir: page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# Markdown Markdown语法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;## https://github.com/chjj/marked&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;markdown:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gfm: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pedantic: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sanitize: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tables: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  breaks: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  smartLists: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  smartypants: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# Deployment 部署配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;## Docs: https://hexo.io/docs/deployment.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: https://github.com/windrunnerlihuan/windrunnerlihuan.github.io.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;其他没啥改动的，就改个&lt;strong&gt;Site 站点信息&lt;/strong&gt;，&lt;strong&gt;URL&lt;/strong&gt;，还有&lt;strong&gt;Deployment 部署配置&lt;/strong&gt;，前两个没啥难度，这个&lt;strong&gt;Deployment 部署配置&lt;/strong&gt;很重要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中&lt;strong&gt;type&lt;/strong&gt;一定要填git，因为以前低版本的hexo是github，不过现在早就废弃了。&lt;/li&gt;
&lt;li&gt;其次&lt;strong&gt;repo&lt;/strong&gt;填你github项目的clone地址，http/https/ssh类型都行，我的是&lt;br&gt;&lt;a href=&quot;https://github.com/windrunnerlihuan/windrunnerlihuan.github.io.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/windrunnerlihuan/windrunnerlihuan.github.io.git&lt;/a&gt; 和git@github.com:windrunnerlihuan/windrunnerlihuan.github.io.git ，我填的是第一个，因为填第二个后期发布时会验证公钥，需要用git bash生成公钥，然后贴到项目的Deploy keys里，比较麻烦，所以为了省事，我填了第一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2） 新建博客&lt;/p&gt;
&lt;p&gt;接下来，我们开始新博客了，创建第一篇博客文章。Hexo建议通过命令行操作，当然你也可以直接在_posts目录下创建文件。&lt;/p&gt;
&lt;p&gt;通过命令创建新文章，在bash 里输入 hexo new “新的开始”&lt;br&gt;在source/_posts目录下就会生成文件：”新的开始.md”。&lt;/p&gt;
&lt;p&gt;然后我们编辑 &lt;strong&gt;新的开始.md&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: 新的开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: 2016-05-27 18:44:12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tags:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;categories: 日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是**新的开始**，我用hexo创建了第一篇文章。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Swig语法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Every interaction is both precious and an opportunity to delight.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endblockquote %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Markdown语法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Every interaction is both precious and an opportunity to delight.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Swig语法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% link gank日志 http://gank.io/ true 粉丝日志 %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Markdown语法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[gank日志](http://gank.io/)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Swig语法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% img /images/新的开始/meizi.jpg 400 600 这是一张图片 %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Markdown语法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;![这是一张图片](http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/meizi.jpg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 公式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$J\_\alpha(x)=\sum _&amp;#123;m=0&amp;#125;^\infty \frac&amp;#123;(-1)^ m&amp;#125;&amp;#123;m! \, \Gamma (m + \alpha + 1)&amp;#125;&amp;#123;\left(&amp;#123;\frac&amp;#123;x&amp;#125;&amp;#123;2&amp;#125;&amp;#125;\right)&amp;#125;^&amp;#123;2 m + \alpha &amp;#125;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;感觉非常好。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;文章使用markedonw语法写的，还有很多普通或者高级的语法，这个可以问度娘或者谷歌，找找别人的帖子学学。&lt;/p&gt;
&lt;p&gt;用命令行启动本地server：hexo server&lt;br&gt;通过浏览器打开， &lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt; ，就出现了我们新写的文章。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/newstart.png&quot; alt=&quot;新的开始文章预览图&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;4-发布到Github&quot;&gt;&lt;a href=&quot;#4-发布到Github&quot; class=&quot;headerlink&quot; title=&quot;4. 发布到Github&quot;&gt;&lt;/a&gt;4. 发布到Github&lt;/h2&gt;&lt;p&gt;1)  静态化处理&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;写完了文章，我们就可以发布了。要说明的一点是hexo的静态博客框架，那什么是静态博客呢？静态博客，是只包含html, javascript, css文件的网站，没有动态的脚本。虽然我们是用Node进行的开发，但博客的发布后就与Node无关了。在发布之前，我们要通过一条命令，把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。&lt;/p&gt;
&lt;p&gt;输入静态化命令 ：hexo generate&lt;br&gt;在本地目录下，会生成一个public的目录，里面包括了所有静态化的文件。&lt;/p&gt;
&lt;p&gt;2) 发布到github&lt;br&gt;接下来，我们把这个博客发布到github。&lt;br&gt;现在检查我们上次填好的_config.yml文件，找到deploy的部分，设置github的项目地址。&lt;br&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: https://github.com/windrunnerlihuan/windrunnerlihuan.github.io.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后执行部署命令：hexo deploy&lt;br&gt;中间过程会让你再次输入github账号和密码，输入就行了&lt;br&gt;成功后验证，浏览器里输入上次的地址：&lt;a href=&quot;http://windrunnerlihuan.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://windrunnerlihuan.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/newstart.png&quot; alt=&quot;新的开始文章预览图&quot;&gt;&lt;br&gt;说明我们成功了&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;5-独立购买域名与绑定&quot;&gt;&lt;a href=&quot;#5-独立购买域名与绑定&quot; class=&quot;headerlink&quot; title=&quot;5. 独立购买域名与绑定&quot;&gt;&lt;/a&gt;5. 独立购买域名与绑定&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;有时候我们想做个人博客，想让自己的博客拥有自己的域名，那就得去买个域名了。这里我们可以通过万网申请购买：&lt;a href=&quot;https://wanwang.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://wanwang.aliyun.com/&lt;/a&gt;  。流程很简单，基本上一路next。&lt;br&gt;我也斥资45块买了个.com结尾的域名 &lt;strong&gt;windrunnerlihuan.com&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/yulist.png&quot; alt=&quot;域名列表图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后就是解析域名了，不过解析之前你得知道你的gihub pages个人主页的ip：&lt;br&gt;首先ping 一下个人主页地址 ，控制台里输入 ping www.windrunnerlihuan.github.io，然后会返回一个ip，然后用这个ip设置我们刚才买的域名解析，也是轻车熟路&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/yudecode.png&quot; alt=&quot;域名解析图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后最重要的是：&lt;br&gt;1）在github项目中，新建一个文件CNAME，文件中写出你要绑定的域名windrunnerlihuan.com。通过浏览器，访问&lt;a href=&quot;http://windrunnerlihuan.com，就打开了我们建好的博客站点。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://windrunnerlihuan.com，就打开了我们建好的博客站点。&lt;/a&gt;&lt;br&gt;2）由于每次执行deploy的时候，github代码仓库所有的文件都会被覆盖，所以我们最好在source目录下创建这个CNAME文件，这样每次部署就不用动手创建了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;6-个性化功能配置&quot;&gt;&lt;a href=&quot;#6-个性化功能配置&quot; class=&quot;headerlink&quot; title=&quot;6. 个性化功能配置&quot;&gt;&lt;/a&gt;6. 个性化功能配置&lt;/h2&gt;&lt;p&gt;1） 替换皮肤&lt;br&gt;博客系统流行的原因，是因为他的个人性，而皮肤正式个性化的一种体现。&lt;br&gt;利用hexo替换皮肤，还是比较简单的，3步完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No.1&lt;/strong&gt;  找到一个皮肤或者自己开发一个皮肤&lt;br&gt;打开hexo的皮肤列表页面，你可以找到很多的皮肤，网页地址： &lt;a href=&quot;https://github.com/tommy351/hexo/wiki/Themes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tommy351/hexo/wiki/Themes&lt;/a&gt; 。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No.2&lt;/strong&gt;放到themes目录下&lt;br&gt;比如，我觉得pacman( &lt;a href=&quot;https://github.com/A-limon/pacman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/A-limon/pacman&lt;/a&gt; )这个皮肤还不错，我就可以下载皮肤到themes目录下面。&lt;br&gt;通过git命令下载皮肤&lt;br&gt;git clone &lt;a href=&quot;https://github.com/A-limon/pacman.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/A-limon/pacman.git&lt;/a&gt; themes/pacman&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No.3&lt;/strong&gt;在_config.yml指定皮肤&lt;br&gt;编辑文件_config.yml，找到theme一行，改成 theme: pacman&lt;br&gt;本地启动hexo服务器，打开浏览器 &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/pifu.png&quot; alt=&quot;替换了皮肤的博客&quot;&gt;&lt;/p&gt;
&lt;p&gt;新皮肤的效果还不错吧，然后静态化处理，再发布到github，就完成了站点的改版。&lt;/p&gt;
&lt;p&gt;这里只介绍换皮肤，当然还有其他很多功能，不过对于我来说暂时没多大卵用，如果其他人有需求可以再google或者baidu搜，也都不难，很easy。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;因为这是我第一次搭建个人博客，水平实在比较差，流程写的很粗燥，很多细节都没有涉及，望大家体谅，以后我会努力完善的，将后续文章做的更好。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我的博客搭建历程，使用github pages + hexo，域名解析，配置插件&lt;br&gt;
    
    </summary>
    
      <category term="日志" scheme="http://windrunnerlihuan.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="博客搭建" scheme="http://windrunnerlihuan.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="http://windrunnerlihuan.com/2016/05/27/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://windrunnerlihuan.com/2016/05/27/新的开始/</id>
    <published>2016-05-27T10:44:12.000Z</published>
    <updated>2016-05-29T14:05:35.318Z</updated>
    
    <content type="html">&lt;p&gt;这是&lt;strong&gt;新的开始&lt;/strong&gt;，我用hexo创建了第一篇文章。&lt;/p&gt;
&lt;p&gt;通过下面的命令，就可以创建新文章&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;D:\workspace\javascript\nodejs-hexo&amp;gt;hexo new 新的开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[info] File created at D:\workspace\javascript\nodejs-hexo\source\_posts\新的开始.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;感觉非常好。&lt;/p&gt;
&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;h1 id=&quot;Swig语法&quot;&gt;&lt;a href=&quot;#Swig语法&quot; class=&quot;headerlink&quot; title=&quot;Swig语法&quot;&gt;&lt;/a&gt;Swig语法&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;Every interaction is both precious and an opportunity to delight.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Seth Godin&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Welcome to Island Marketing&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;h1 id=&quot;Markdown语法&quot;&gt;&lt;a href=&quot;#Markdown语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法&quot;&gt;&lt;/a&gt;Markdown语法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Every interaction is both precious and an opportunity to delight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;代码块&quot;&gt;&lt;a href=&quot;#代码块&quot; class=&quot;headerlink&quot; title=&quot;代码块&quot;&gt;&lt;/a&gt;代码块&lt;/h2&gt;&lt;h1 id=&quot;Swig语法-1&quot;&gt;&lt;a href=&quot;#Swig语法-1&quot; class=&quot;headerlink&quot; title=&quot;Swig语法&quot;&gt;&lt;/a&gt;Swig语法&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;.compact&lt;/span&gt;&lt;a href=&quot;http://underscorejs.org/#compact&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Underscore.js&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.compact([0, 1, false, 2, ‘’, 3]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; [1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Markdown语法-1&quot;&gt;&lt;a href=&quot;#Markdown语法-1&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法&quot;&gt;&lt;/a&gt;Markdown语法&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.compact([0, 1, false, 2, ‘’, 3]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; [1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;h1 id=&quot;Swig语法-2&quot;&gt;&lt;a href=&quot;#Swig语法-2&quot; class=&quot;headerlink&quot; title=&quot;Swig语法&quot;&gt;&lt;/a&gt;Swig语法&lt;/h1&gt;&lt;a href=&quot;http://gank.io/&quot; title=&quot;粉丝日志&quot; target=&quot;_blank&quot;&gt;gank日志&lt;/a&gt;
&lt;h1 id=&quot;Markdown语法-2&quot;&gt;&lt;a href=&quot;#Markdown语法-2&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法&quot;&gt;&lt;/a&gt;Markdown语法&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://gank.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gank日志&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;404html&quot;&gt;测试404页面&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;图片&quot;&gt;&lt;a href=&quot;#图片&quot; class=&quot;headerlink&quot; title=&quot;图片&quot;&gt;&lt;/a&gt;图片&lt;/h2&gt;&lt;h1 id=&quot;Swig语法-3&quot;&gt;&lt;a href=&quot;#Swig语法-3&quot; class=&quot;headerlink&quot; title=&quot;Swig语法&quot;&gt;&lt;/a&gt;Swig语法&lt;/h1&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8Bmeizi.jpg&quot; width=&quot;400&quot; height=&quot;600&quot; title=&quot;这是一张图片&quot;&gt;
&lt;h1 id=&quot;Markdown语法-3&quot;&gt;&lt;a href=&quot;#Markdown语法-3&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法&quot;&gt;&lt;/a&gt;Markdown语法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://o7xxrho8u.bkt.clouddn.com/img/windrunnerlihuan%E5%8D%9A%E5%AE%A2/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8Bmeizi.jpg&quot; alt=&quot;这是一张图片&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;公式&quot;&gt;&lt;a href=&quot;#公式&quot; class=&quot;headerlink&quot; title=&quot;公式&quot;&gt;&lt;/a&gt;公式&lt;/h2&gt;&lt;p&gt;$$J_\alpha(x)=\sum _{m=0}^\infty \frac{(-1)^ m}{m! \, \Gamma (m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha }$$&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      这是新的开始，我的第一篇文章，主要用于测试......
    
    </summary>
    
      <category term="日志" scheme="http://windrunnerlihuan.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="开始" scheme="http://windrunnerlihuan.com/tags/%E5%BC%80%E5%A7%8B/"/>
    
  </entry>
  
</feed>
